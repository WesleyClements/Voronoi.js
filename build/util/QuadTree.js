import Vector2 from './Vector2.js';
import AABB from './AABB.js';
const BOTTOM_LEFT = 0;
const TOP_RIGHT = 1;
const TOP_LEFT = 2;
const BOTTOM_RIGHT = 3;
function getIndex(point, center) {
    const right = point.x > center.x;
    const top = point.y > center.y;
    return top ? (right ? TOP_RIGHT : TOP_LEFT) : right ? BOTTOM_RIGHT : BOTTOM_LEFT;
}
function getSubBounds(bounds) {
    const center = bounds.center;
    return [
        new AABB(bounds.min, center),
        new AABB(center, bounds.max),
        new AABB(new Vector2(bounds.min.x, center.y), new Vector2(center.x, bounds.max.y)),
        new AABB(new Vector2(center.x, bounds.min.y), new Vector2(bounds.max.x, center.y)),
    ];
}
class PointQuadTreeNode {
    constructor(quadTree, bounds, depth) {
        this.quadTree = quadTree;
        this.bounds = bounds;
        this.depth = depth;
        this.children = [];
    }
    getNode(test) {
        if (!this.nodes)
            return undefined;
        else
            return this.nodes[getIndex(test, this.bounds.center)];
    }
    insert(item) {
        if (!item)
            return false;
        if (this.nodes) {
            return this.getNode(item).insert(item);
        }
        else {
            this.children.push(item);
            if (this.depth >= this.quadTree.maxDepth)
                return true;
            if (this.children.length < this.quadTree.maxChildren)
                return true;
            this.nodes = getSubBounds(this.bounds).map(aabb => new PointQuadTreeNode(this.quadTree, aabb, this.depth + 1));
            this.children.forEach(child => this.insert(child));
            delete this.children;
            return true;
        }
    }
    retrieve(test) {
        if (test instanceof Vector2) {
            if (this.nodes)
                return this.getNode(test).retrieve(test);
            else
                return Array.from(this.children);
        }
        else if (test instanceof AABB) {
            if (this.nodes) {
                return this.nodes.reduce((children, node) => {
                    if (!node.bounds.intersects(test))
                        return children;
                    return [...children, ...node.retrieve(test)];
                }, []);
            }
            else {
                return this.children.filter(child => test.contains(child));
            }
        }
        else
            throw new Error('test is not a Vector2 or AABB');
    }
    clear() {
        if (this.children)
            delete this.children;
        if (this.nodes) {
            this.nodes.forEach(node => node.clear());
            delete this.nodes;
        }
    }
    draw() {
        this.bounds.draw();
        if (this.nodes)
            this.nodes.forEach(node => node.draw());
    }
}
class AABBQuadTreeNode {
    constructor(quadTree, bounds, depth) {
        this.quadTree = quadTree;
        this.bounds = bounds;
        this.depth = depth;
        this.children = [];
    }
    getNode(test) {
        if (!this.nodes)
            return undefined;
        else
            return this.nodes[getIndex(test, this.bounds.center)];
    }
    insert(item) {
        if (!item)
            return false;
        if (this.nodes) {
            if (!this.getNode(item.center).insert(item))
                this.children.push(item);
        }
        else {
            if (!this.bounds.contains(item))
                return false;
            this.children.push(item);
            if (this.depth >= this.quadTree.maxDepth)
                return true;
            if (this.children.length < this.quadTree.maxChildren)
                return true;
            this.nodes = getSubBounds(this.bounds).map(aabb => new AABBQuadTreeNode(this.quadTree, aabb, this.depth + 1));
            this.children = this.children.filter(child => this.insert(child));
        }
        return true;
    }
    retrieve(test) {
        if (test instanceof Vector2) {
            const children = this.children.filter(child => child.contains(test));
            if (this.nodes)
                return [...children, ...this.getNode(test).retrieve(test)];
            else
                return children;
        }
        else if (test instanceof AABB) {
            const children = this.children.filter(child => child.intersects(test));
            if (this.nodes)
                return [...children, ...this.getNode(test.center).retrieve(test)];
            else
                return children;
        }
        else
            throw new Error('test is not a Vector2 or AABB');
    }
    clear() {
        if (this.children)
            delete this.children;
        if (this.nodes) {
            this.nodes.forEach(node => node.clear());
            delete this.nodes;
        }
    }
    draw() {
        this.bounds.draw();
        if (this.nodes)
            this.nodes.forEach(node => node.draw());
    }
}
export class PointQuadTree {
    constructor(bounds, maxChildren, maxDepth = 4) {
        this.root = new PointQuadTreeNode(this, bounds, 0);
        this.maxChildren = maxChildren;
        this.maxDepth = maxDepth;
    }
    insert(...items) {
        items.forEach((item, i) => {
            if (!item)
                throw new Error(`item at ${i} is null`);
            this.root.insert(item);
        });
    }
    retrieve(test) {
        return Array.from(this.root.retrieve(test));
    }
    clear() {
        this.root.clear();
    }
    draw() {
        this.root.draw();
    }
}
export class AABBQuadTree {
    constructor(bounds, maxChildren, maxDepth = 4) {
        this.root = new AABBQuadTreeNode(this, bounds, 0);
        this.maxChildren = maxChildren;
        this.maxDepth = maxDepth;
        this.children = [];
    }
    insert(...items) {
        items.forEach((item, i) => {
            if (!item)
                throw new Error(`item at ${i} is null`);
            if (!this.root.insert(item))
                this.children.push(item);
        });
    }
    retrieve(test) {
        return Array.from([...this.children, ...this.root.retrieve(test)]);
    }
    clear() {
        this.root.clear();
        this.children = [];
    }
    draw() {
        this.root.draw();
    }
}
//# sourceMappingURL=data:application/json;base64,