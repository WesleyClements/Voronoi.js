import Vector2 from './util/Vector2.js';
import AABB from './util/AABB.js';
import Diagram from './Voronoi.js';
import { AABBQuadTree } from './util/QuadTree.js';
import LineSegment from './util/LineSegment.js';
const pointCount = 20;
const maxPointCount = 400;
let points = [];
let diagram;
let quadTree;
let width;
let height;
let bounds;
let generationPoint;
function updateDimensions() {
    width = windowWidth - 40;
    height = windowHeight - 40;
    bounds = new AABB(new Vector2(0, 0), new Vector2(width, height));
    if (generationPoint && !bounds.contains(generationPoint)) {
        generationPoint = new Vector2(width / 2, height / 2);
    }
}
window.setup = () => {
    window.lerpT = 0.02;
    updateDimensions();
    generationPoint = new Vector2(width / 2, height / 2);
    createCanvas(width, height);
    for (let i = 0; i < pointCount; ++i) {
        const point = new Vector2(random() * width, random() * height);
        point.color = color(sqrt(random()) * 255, sqrt(random()) * 255, sqrt(random()) * 255);
        points.push(point);
    }
};
window.windowResized = () => {
    updateDimensions();
    resizeCanvas(width, height);
};
window.draw = () => {
    scale(1, -1);
    translate(0, -height);
    diagram = new Diagram(points);
    diagram.finish(bounds);
    quadTree = new AABBQuadTree(new AABB(Vector2.subtract(bounds.min, new Vector2(10, 10)), Vector2.add(bounds.max, new Vector2(10, 10))), 20, 10);
    diagram.cells.forEach(cell => {
        let cellAABB = cell.boundingAABB;
        cellAABB.cell = cell;
        quadTree.insert(cellAABB);
    });
    const mousePoint = new Vector2(mouseX, height - mouseY);
    let highCell;
    quadTree.retrieve(new AABB(mousePoint, mousePoint)).forEach(cellAABB => {
        if (cellAABB.cell.contains(mousePoint))
            highCell = cellAABB.cell;
    });
    background(150);
    strokeWeight(1);
    stroke(color(0, 0, 0));
    diagram.edges.forEach(edge => edge.draw());
    diagram.sites.forEach((site) => {
        const { cell } = site;
        if (!cell || cell.edges.length < 3)
            return;
        if (cell === highCell)
            fill(color(255, 0, 0));
        else
            fill(site.color);
        stroke(color(0, 0, 0));
        drawCell(cell);
        stroke(color(0, 0, 255));
        cell.vertices.forEach(vertex => LineSegment.draw(site, vertex));
    });
    points = diagram.getRelaxedSites(window.lerpT);
    if (mouseIsPressed) {
        generationPoint = new Vector2(min(max(0, mouseX), width), min(max(0, mouseY), height));
    }
    if (points.length < maxPointCount && frameCount % 10 === 0) {
        const point = Vector2.add(generationPoint, new Vector2(random() - 0.5, random() - 0.5));
        point.color = color(sqrt(random()) * 255, sqrt(random()) * 255, sqrt(random()) * 255);
        points.push(point);
    }
};
function drawCell(cell) {
    beginShape();
    cell.edges.forEach((edge) => {
        const v = edge.end;
        if (!v)
            return;
        vertex(v.x, v.y);
    });
    endShape(CLOSE);
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2tldGNoLmpzIiwic291cmNlUm9vdCI6Ii4vc3JjLyIsInNvdXJjZXMiOlsic2tldGNoLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE9BQU8sT0FBTyxNQUFNLG1CQUFtQixDQUFDO0FBQ3hDLE9BQU8sSUFBSSxNQUFNLGdCQUFnQixDQUFDO0FBQ2xDLE9BQU8sT0FBaUIsTUFBTSxjQUFjLENBQUM7QUFDN0MsT0FBTyxFQUFFLFlBQVksRUFBRSxNQUFNLG9CQUFvQixDQUFDO0FBQ2xELE9BQU8sV0FBVyxNQUFNLHVCQUF1QixDQUFDO0FBcUJoRCxNQUFNLFVBQVUsR0FBVyxFQUFFLENBQUM7QUFDOUIsTUFBTSxhQUFhLEdBQVcsR0FBRyxDQUFDO0FBQ2xDLElBQUksTUFBTSxHQUFtQixFQUFFLENBQUM7QUFFaEMsSUFBSSxPQUFnQixDQUFDO0FBQ3JCLElBQUksUUFBZ0MsQ0FBQztBQUVyQyxJQUFJLEtBQWEsQ0FBQztBQUNsQixJQUFJLE1BQWMsQ0FBQztBQUVuQixJQUFJLE1BQVksQ0FBQztBQUVqQixJQUFJLGVBQXdCLENBQUM7QUFFN0IsU0FBUyxnQkFBZ0I7SUFDdkIsS0FBSyxHQUFHLFdBQVcsR0FBRyxFQUFFLENBQUM7SUFDekIsTUFBTSxHQUFHLFlBQVksR0FBRyxFQUFFLENBQUM7SUFDM0IsTUFBTSxHQUFHLElBQUksSUFBSSxDQUFDLElBQUksT0FBTyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsRUFBRSxJQUFJLE9BQU8sQ0FBQyxLQUFLLEVBQUUsTUFBTSxDQUFDLENBQUMsQ0FBQztJQUNqRSxJQUFJLGVBQWUsSUFBSSxDQUFDLE1BQU0sQ0FBQyxRQUFRLENBQUMsZUFBZSxDQUFDLEVBQUU7UUFDeEQsZUFBZSxHQUFHLElBQUksT0FBTyxDQUFDLEtBQUssR0FBRyxDQUFDLEVBQUUsTUFBTSxHQUFHLENBQUMsQ0FBQyxDQUFDO0tBQ3REO0FBQ0gsQ0FBQztBQUVELE1BQU0sQ0FBQyxLQUFLLEdBQUcsR0FBRyxFQUFFO0lBQ2xCLE1B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