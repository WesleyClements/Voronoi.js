import Vector2 from './util/Vector2.js';
import AABB from './util/AABB.js';
import Diagram from './Voronoi.js';
import { AABBQuadTree } from './util/QuadTree.js';
import LineSegment from './util/LineSegment.js';
const pointCount = 20;
const maxPointCount = 400;
let points = [];
let diagram;
let quadTree;
let width;
let height;
let bounds;
let generationPoint;
let drawQuadTree = false;
let drawCellAABB = false;
function updateDimensions() {
    width = windowWidth - 40;
    height = windowHeight - 40;
    bounds = new AABB(new Vector2(0, 0), new Vector2(width, height));
    if (generationPoint && !bounds.contains(generationPoint)) {
        generationPoint = new Vector2(width / 2, height / 2);
    }
}
function getMouseLocation() {
    return new Vector2(mouseX, height - mouseY);
}
function drawCell(cell) {
    beginShape();
    cell.edges.forEach((edge) => {
        const v = edge.end;
        if (!v)
            return;
        vertex(v.x, v.y);
    });
    endShape(CLOSE);
}
window.setup = () => {
    window.lerpT = 0.02;
    updateDimensions();
    generationPoint = new Vector2(width / 2, height / 2);
    createCanvas(width, height);
    for (let i = 0; i < pointCount; ++i) {
        const point = new Vector2(random() * width, random() * height);
        point.color = color(sqrt(random()) * 255, sqrt(random()) * 255, sqrt(random()) * 255);
        points.push(point);
    }
};
window.windowResized = () => {
    updateDimensions();
    resizeCanvas(width, height);
};
window.keyPressed = () => {
    if (key.toLowerCase() === 'q') {
        drawQuadTree = !drawQuadTree;
    }
    if (key.toLowerCase() === 'b') {
        drawCellAABB = !drawCellAABB;
    }
};
window.draw = () => {
    scale(1, -1);
    translate(0, -height);
    diagram = new Diagram(points);
    diagram.finish(bounds);
    quadTree = new AABBQuadTree(new AABB(Vector2.subtract(bounds.min, new Vector2(10, 10)), Vector2.add(bounds.max, new Vector2(10, 10))), 20, 10);
    diagram.cells.forEach(cell => {
        let cellAABB = cell.boundingAABB;
        cellAABB.cell = cell;
        quadTree.insert(cellAABB);
    });
    let highCell;
    const mouse = getMouseLocation();
    quadTree.retrieve(mouse).forEach(cellAABB => {
        if (cellAABB.cell.contains(mouse))
            highCell = cellAABB.cell;
    });
    background(150);
    strokeWeight(1);
    stroke(color(0, 0, 0));
    diagram.cells.forEach(cell => {
        if (cell.edges.length < 3)
            return;
        if (cell === highCell)
            fill(color(255, 0, 0));
        else
            fill(cell.site.color);
        stroke(color(0, 0, 0));
        drawCell(cell);
        stroke(color(0, 0, 255));
        cell.vertices.forEach(vertex => LineSegment.draw(cell.site, vertex));
    });
    if (drawCellAABB) {
        strokeWeight(2);
        diagram.cells.forEach(cell => {
            if (cell === highCell)
                stroke(color(255, 0, 0));
            else
                stroke(color(255, 255, 0));
            cell.boundingAABB.draw();
        });
    }
    if (drawQuadTree) {
        strokeWeight(2);
        stroke(color(0, 0, 0));
        quadTree.draw();
    }
    points = diagram.getRelaxedSites(window.lerpT);
    if (mouseIsPressed) {
        const mouse = getMouseLocation();
        generationPoint = new Vector2(min(max(0, mouse.x), width), min(max(0, mouse.y), height));
    }
    if (points.length < maxPointCount && frameCount % 10 === 0) {
        const point = Vector2.add(generationPoint, new Vector2(random() - 0.5, random() - 0.5));
        point.color = color(sqrt(random()) * 255, sqrt(random()) * 255, sqrt(random()) * 255);
        points.push(point);
    }
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2tldGNoLmpzIiwic291cmNlUm9vdCI6Ii4vc3JjLyIsInNvdXJjZXMiOlsic2tldGNoLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE9BQU8sT0FBTyxNQUFNLG1CQUFtQixDQUFDO0FBQ3hDLE9BQU8sSUFBSSxNQUFNLGdCQUFnQixDQUFDO0FBQ2xDLE9BQU8sT0FBaUIsTUFBTSxjQUFjLENBQUM7QUFDN0MsT0FBTyxFQUFFLFlBQVksRUFBRSxNQUFNLG9CQUFvQixDQUFDO0FBQ2xELE9BQU8sV0FBVyxNQUFNLHVCQUF1QixDQUFDO0FBcUJoRCxNQUFNLFVBQVUsR0FBVyxFQUFFLENBQUM7QUFDOUIsTUFBTSxhQUFhLEdBQVcsR0FBRyxDQUFDO0FBQ2xDLElBQUksTUFBTSxHQUFtQixFQUFFLENBQUM7QUFFaEMsSUFBSSxPQUFnQixDQUFDO0FBQ3JCLElBQUksUUFBZ0MsQ0FBQztBQUVyQyxJQUFJLEtBQWEsQ0FBQztBQUNsQixJQUFJLE1BQWMsQ0FBQztBQUVuQixJQUFJLE1BQVksQ0FBQztBQUVqQixJQUFJLGVBQXdCLENBQUM7QUFFN0IsSUFBSSxZQUFZLEdBQVksS0FBSyxDQUFDO0FBQ2xDLElBQUksWUFBWSxHQUFZLEtBQUssQ0FBQztBQUVsQyxTQUFTLGdCQUFnQjtJQUN2QixLQUFLLEdBQUcsV0FBVyxHQUFHLEVBQUUsQ0FBQztJQUN6QixNQUFNLEdBQUcsWUFBWSxHQUFHLEVBQUUsQ0FBQztJQUMzQixNQUFNLEdBQUcsSUFBSSxJQUFJLENBQUMsSUFBSSxPQUFPLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxFQUFFLElBQUksT0FBTyxDQUFDLEtBQUssRUFBRSxNQUFNLENBQUMsQ0FBQyxDQUFDO0lBQ2pFLElBQUksZUFBZSxJQUFJLENBQUMsTUFBTSxDQUFDLFFBQVEsQ0FBQyxlQUFlLENBQUMsRUFBRTtRQUN4RCxlQUFlLEdBQUcsSUFBSSxPQUFPLENBQUMsS0FBSyxHQUFHLENBQUMsRUFBRSxNQUFNLEdBQUcsQ0FBQyxDQUFDLENB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